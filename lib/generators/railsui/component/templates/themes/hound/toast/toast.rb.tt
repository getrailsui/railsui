# frozen_string_literal: true

# Usage:
# <%= rui(:toast, 
#   title: "Success!",
#   message: "Your changes have been saved.",
#   variant: :success
# ) %>
#
# Auto-show on page load:
# <%= rui(:toast,
#   title: "Welcome back!",
#   message: "You have 3 new notifications.",
#   trigger_on_load: true,
#   variant: :info
# ) %>
#
# With custom icon and placement:
# <%= rui(:toast,
#   title: "Error",
#   message: "Failed to process payment.",
#   icon: "credit-card",
#   variant: :error,
#   placement: :left
# ) %>
#
# Trigger via JavaScript:
# <%= rui(:toast, title: "Item added to cart", variant: :success) %>
# <button data-action="click->railsui-toast#show">Show Toast</button>
#
# Options:
# - title: Toast title text
# - message: Toast message/description
# - icon: Custom icon name (uses default based on variant if not specified)
# - variant: :success (default), :error, :warning, :info
# - controller: Stimulus controller name (default: "railsui-toast")
# - trigger_on_load: Automatically show on page load (default: false)
# - placement: :right (default) or :left
# - classes: Additional CSS classes
# - **tag_options: Additional HTML attributes
#
# Notes:
# - Each variant has a default icon: success=check, error=x, warning=exclamation, info=info
# - Toast slides in from the side based on placement
# - Requires Stimulus controller for show/hide functionality
# - Use data-action="click->railsui-toast#show" to trigger programmatically
# - Use data-action="click->railsui-toast#hide" on close buttons
module Railsui
  class <%= class_name %>Component < RailsuiComponent
  def initialize(
    title: nil,
    message: nil,
    icon: nil,
    variant: :success,
    controller: "railsui-toast",
    classes: nil,
    trigger_on_load: false,
    placement: :right,
    **tag_options
  )
    @title = title
    @message = message
    @icon = icon
    @variant = variant.to_sym
    @controller = controller
    @classes = classes
    @trigger_on_load = trigger_on_load
    @placement = placement.to_sym
    @tag_options = tag_options
  end

  private

  attr_reader :title, :message, :icon, :variant, :controller, :classes, 
              :trigger_on_load, :placement, :tag_options

  def wrapper_classes
    css_classes("relative", classes)
  end
  
  def wrapper_attributes
    attrs = {
      class: wrapper_classes,
      "data-controller": controller
    }
    
    if trigger_on_load
      attrs["data-#{controller_dashed}-trigger-on-load-value"] = trigger_on_load
    end
    
    merge_attributes(attrs, **tag_options)
  end
  
  def toast_container_classes
    base_classes = "pointer-events-none absolute flex items-center px-4 py-6 sm:p-6 top-0 right-0 left-0 w-full"
    visibility_class = trigger_on_load ? "" : "hidden"
    css_classes(base_classes, placement_class, visibility_class)
  end
  
  def toast_classes
    base_classes = "pointer-events-auto w-full max-w-sm overflow-hidden rounded-md shadow-lg"
    css_classes(base_classes, toast_config[:bg], toast_config[:border])
  end
  
  def toast_icon
    icon || toast_config[:default_icon]
  end
  
  def icon_classes
    "size-6 #{toast_config[:icon_color]}"
  end
  
  def title_classes
    "text-sm font-medium text-slate-900 dark:text-white"
  end
  
  def message_classes
    base_classes = "text-sm text-slate-500 dark:text-slate-300"
    title_spacing = title ? "mt-1" : ""
    css_classes(base_classes, title_spacing)
  end
  
  def content_wrapper_classes
    toast_icon ? "ml-3 w-0 flex-1 pt-0.5" : "w-0 flex-1 pt-0.5"
  end
  
  def close_button_classes
    "inline-flex rounded-sm bg-white text-slate-400 hover:text-slate-500 focus:outline-hidden focus:ring-2 focus:ring-slate-50 dark:bg-transparent dark:focus:ring-slate-500 dark:hover:text-slate-100 dark:focus:text-slate-100"
  end
  
  def controller_dashed
    controller.tr("_", "-")
  end
  
  def placement_class
    case placement
    when :left
      "justify-start animate-toast-from-left"
    else # :right
      "justify-end animate-toast-from-right"
    end
  end
  
  def toast_config
    configs = {
      success: {
        bg: "bg-white dark:bg-slate-950",
        border: "ring-1 ring-black/10 dark:border dark:border-slate-700/80",
        icon_color: "text-green-500 dark:text-green-400",
        default_icon: "check-circle"
      },
      error: {
        bg: "bg-white dark:bg-slate-950",
        border: "ring-1 ring-red-200/50 dark:border dark:border-red-700/50",
        icon_color: "text-red-500 dark:text-red-400",
        default_icon: "x-circle"
      },
      warning: {
        bg: "bg-white dark:bg-slate-950",
        border: "ring-1 ring-yellow-200/50 dark:border dark:border-yellow-700/50",
        icon_color: "text-yellow-500 dark:text-yellow-400",
        default_icon: "exclamation-triangle"
      },
      info: {
        bg: "bg-white dark:bg-slate-950",
        border: "ring-1 ring-primary-200/50 dark:border dark:border-primary-700/50",
        icon_color: "text-primary-500 dark:text-primary-400",
        default_icon: "information-circle"
      }
    }
    
    configs[variant] || configs[:success]
  end
  end
end