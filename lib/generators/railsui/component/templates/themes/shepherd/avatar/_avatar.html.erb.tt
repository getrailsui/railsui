<%%# locals: (src: nil, alt: "Avatar", classes: nil, demo: false, size: :md, rounded: :full, content: nil) %>

<%%# Avatar Component
     locals:
       - src: an ActiveStorage attachment or image URL
       - alt: fallback alt text (default: "Avatar")
       - demo: can be `true` or a hash like `{ id: 12, variant: "men" }` for a generated avatar
       - size: avatar size symbol, one of:
         :xs, :sm, :md, :lg, :xl, :"2xl" (default: :md)
       - rounded: border radius, one of:
         :sm, :md, :lg, :xl, :full (default: :full)
       - classes: optional string of extra Tailwind classes
       - content: unused but required local, passed automatically from `rui` helper, ignored here

     Usage examples:
       rui :avatar, src: user.avatar, alt: user.name
       rui :avatar, src: "https://example.com/pic.jpg"
       rui :avatar, demo: true
       rui :avatar, demo: { id: 7, variant: "women" }
       rui :avatar, src: user.avatar, size: :xl, rounded: :md
%>

<%%
  size_classes = {
    xs: "size-6",
    sm: "size-8",
    md: "size-10",
    lg: "size-12",
    xl: "size-16",
    "2xl": "size-20"
  }

  rounded_classes = {
    sm: "rounded-sm",
    md: "rounded-md",
    lg: "rounded-lg",
    xl: "rounded-xl",
    full: "rounded-full"
  }

  size_class = size_classes[size.to_sym] || "size-10"
  rounded_class = rounded == false ? nil : rounded_classes[rounded.to_sym] || "rounded-full"
  base_class = "object-cover"
  avatar_classes = [size_class, rounded_class, base_class, classes].compact.join(" ")

  resolved_src =
    if src.respond_to?(:attached?) && src.attached?
      url_for(src)
    elsif src.is_a?(String)
      src
    elsif demo.present?
      demo_config = demo.is_a?(Hash) ? demo.symbolize_keys : {}
      demo_id = demo_config[:id] || 32
      demo_variant = demo_config[:variant] || "men"
      demo_avatar_url(id: demo_id, variant: demo_variant)
    end
%>

<%% if resolved_src.present? %>
  <%%= image_tag resolved_src, class: avatar_classes, alt: alt %>
<%% end %>
